require('dotenv').config();
const express = require('express');
const jwt = require('jsonwebtoken');

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 5001;
const JWT_SECRET = process.env.JWT_SECRET || 'mysecretkey';

// Hardcoded users with roles
const users = [
  { username: 'admin', password: 'admin123', role: 'Admin' },
  { username: 'moderator', password: 'mod123', role: 'Moderator' },
  { username: 'user', password: 'user123', role: 'User' }
];

// Login route
app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).json({ message: 'Invalid credentials' });

  const token = jwt.sign({ username: user.username, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// JWT verification middleware
const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ message: 'No token provided' });

  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'No token provided' });

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = decoded;
    next();
  });
};

// Role verification middleware
const verifyRole = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Access denied: insufficient role' });
    }
    next();
  };
};

// Admin route
app.get('/api/admin/dashboard', verifyToken, verifyRole('Admin'), (req, res) => {
  res.json({ message: `Welcome Admin ${req.user.username} to the admin dashboard!` });
});

// Moderator route
app.get('/api/moderator/management', verifyToken, verifyRole('Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Welcome ${req.user.username} to the moderator management page!` });
});

// User route
app.get('/api/user/profile', verifyToken, verifyRole('User', 'Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Hello ${req.user.username}, this is your profile page.` });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
